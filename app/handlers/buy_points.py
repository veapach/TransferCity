# app/handlers/buy_points.py

from aiogram import types, Dispatcher
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from ..models.user import User
from ..models.purchase import Purchase
from ..database import get_db
from aiogram.types import Message


class BuyPointsStates(StatesGroup):
    waiting_for_choice = State()


async def cmd_buy_points(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∫—É–ø–∫–∏
    buy_options = (
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –ø–æ–∏–Ω—Ç–æ–≤:\n"
        "1. 100 –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ 50 —Ä—É–±.\n"
        "2. 600 –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ 250 —Ä—É–±.\n"
        "3. 1500 –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ 500 —Ä—É–±.\n"
    )
    await message.answer(buy_options)
    await state.set_state(BuyPointsStates.waiting_for_choice)


async def process_buy_choice(
    message: Message, state: FSMContext, session: AsyncSession
):
    choice = message.text.strip()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç –ø–æ –≤—ã–±–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    packages = {
        "1": {"points": 100, "price": 50},
        "2": {"points": 600, "price": 250},
        "3": {"points": 1500, "price": 500},
    }

    package = packages.get(choice)

    if not package:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        return

    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.

    user_telegram_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    result = await session.execute(
        select(User).where(User.telegram_id == user_telegram_id)
    )
    user = result.scalars().first()

    if not user:
        await message.answer(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await state.clear()
        return

    # –ù–∞—á–∏—Å–ª—è–µ–º –ø–æ–∏–Ω—Ç—ã
    user.balance += package["points"]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
    new_purchase = Purchase(
        user_id=user.id, amount=package["points"], currency_type="points"
    )
    session.add(new_purchase)
    await session.commit()

    await message.answer(
        f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {package['points']} –ø–æ–∏–Ω—Ç–æ–≤ –∑–∞ {package['price']} —Ä—É–±."
    )
    await state.clear()


def register_handlers(dp: Dispatcher):
    dp.message.register(cmd_buy_points, Command(commands=["buy_points"]))
    dp.message.register(process_buy_choice)
